/* SEPARATOR */
DROP TABLE IF EXISTS ajxp_tasks;
/* SEPARATOR */
CREATE TABLE IF NOT EXISTS ajxp_tasks (
  uid VARCHAR(40) NOT NULL,
  `type` INTEGER NOT NULL,
  parent_uid VARCHAR(40) DEFAULT NULL,
  flags INTEGER NOT NULL,
  label VARCHAR(255) NOT NULL,
  user_id VARCHAR(255) NOT NULL,
  ws_id VARCHAR(32) NOT NULL,
  status INTEGER NOT NULL,
  status_msg VARCHAR(500) NOT NULL,
  progress INTEGER NOT NULL,
  schedule INTEGER NOT NULL,
  schedule_value VARCHAR(255) DEFAULT NULL,
  `action` VARCHAR(255) NOT NULL,
  parameters MEDIUMBLOB NOT NULL,
  creation_date INTEGER NOT NULL DEFAULT 0,
  status_update INTEGER NOT NULL DEFAULT 0,
  PRIMARY KEY (uid)
) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
/* SEPARATOR */
CREATE INDEX ajxp_task_usr_idx ON ajxp_tasks (user_id);
/* SEPARATOR */
CREATE INDEX ajxp_task_status_idx ON ajxp_tasks (status);
/* SEPARATOR */
CREATE INDEX ajxp_task_type ON ajxp_tasks (type);
/* SEPARATOR */
CREATE INDEX ajxp_task_schedule ON ajxp_tasks (schedule);
/* SEPARATOR */
CREATE TABLE IF NOT EXISTS `ajxp_tasks_nodes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `task_uid` varchar(40) NOT NULL,
  `node_base_url` varchar(255) NOT NULL,
  `node_path` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
/* SEPARATOR */
CREATE INDEX ajxp_taskn_tuid_idx ON ajxp_tasks_nodes (task_uid);
/* SEPARATOR */
CREATE INDEX ajxp_taskn_base_idx ON ajxp_tasks_nodes (node_base_url);
/* SEPARATOR */
CREATE INDEX ajxp_taskn_path_idx ON ajxp_tasks_nodes (node_path);
/* SEPARATOR */
DROP TABLE IF EXISTS ajxp_mq_queues;
/* SEPARATOR */
CREATE TABLE IF NOT EXISTS `ajxp_mq_queues` (
  `channel_name` varchar(255) NOT NULL,
  `content` LONGBLOB NOT NULL,
  PRIMARY KEY (`channel_name`)
) CHARACTER SET utf8 COLLATE utf8_unicode_ci;
/* SEPARATOR */
DROP TRIGGER IF EXISTS `LOG_UPDATE`;
/* SEPARATOR */
CREATE TRIGGER `LOG_UPDATE` AFTER UPDATE ON `ajxp_index`
FOR EACH ROW INSERT INTO ajxp_changes (repository_identifier, node_id,source,target,type)
  VALUES (new.repository_identifier, new.node_id, old.node_path, new.node_path, CASE old.node_path COLLATE utf8_bin = new.node_path COLLATE utf8_bin WHEN true THEN 'content' ELSE 'path' END);